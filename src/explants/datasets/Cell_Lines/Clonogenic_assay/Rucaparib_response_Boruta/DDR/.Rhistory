setwd("E:/PhD/Experiments-Results/Bioinformatics/Cell lines/PARP_sensitivity_genomics/Primary cell lines/Boruta algorythm - Aleks/FINAL FOR THESIS")
# Install and load Boruta with dependency 'Ranger'
install.packages('Boruta')
install.packages('ranger')
library(Boruta)
library(ranger)
# Upload cell line data from your working directory
AB.data <- read.csv("AB.CNV.CELLSv2.csv")
# Execute Boruta algorithm, focusing on response (to rucaparib?)
AB.CNV.CELLSv2.Boruta <- Boruta(response~.,AB.data)
# View basic results
print(AB.CNV.CELLSV2.Boruta)
# Execute Boruta algorithm, focusing on response (to rucaparib?)
AB.CNV.CELLSv2Boruta <- Boruta(response~.,AB.data)
# View basic results
print(AB.CNV.CELLSV2Boruta)
# Visualise results with a boxplot (significant interactions coloured green)
plot(AB.CNV.CELLSV2Boruta)
View(AB.CNV.CELLSv2.Boruta)
View(AB.CNV.CELLSv2Boruta)
setwd("E:/PhD/Experiments-Results/Bioinformatics/Cell lines/PARP_sensitivity_genomics/Primary cell lines/Boruta algorythm - Aleks/FINAL FOR THESIS")
#setwd("Please insert your working directory filepath here")  # (Example working directory below)
setwd(
# Install and load Boruta with dependency 'Ranger'
install.packages('Boruta')
install.packages('ranger')
library(Boruta)
library(ranger)
# Upload cell line data from your working directory
AB.data <- read.csv("AB CNV cells new.csv")
# Execute Boruta algorithm, focusing on response (to rucaparib?)
AB.CNV.Boruta <- Boruta(response~.,AB.data)
# View basic results
print(AB.CNV.Boruta)
# Visualise results with a boxplot (significant interactions coloured green)
plot(AB.CNV.Boruta)
View(AB.data)
View(AB.CNV.Boruta)
# Upload cell line data from your working directory
AB CNV cells new <- read.csv("AB CNV cells new.csv")
View(AB.data)
setwd(
#setwd("Please insert your working directory filepath here")  # (Example working directory below)
setwd(
library(Boruta)
library(ranger)
# Upload cell line data from your working directory
AB.data.new <- read.csv("AB CNV cells new.csv")
# Execute Boruta algorithm, focusing on response (to rucaparib?)
AB.CNV.Boruta <- Boruta(response~.,AB.data.new)
# Upload cell line data from your working directory
AB.data.new <- read.csv("AB CNV cells new.csv")
# Execute Boruta algorithm, focusing on response (to rucaparib?)
AB.CNV.cells.new Boruta <- Boruta(response~.,AB.data.new)
# Execute Boruta algorithm, focusing on response (to rucaparib?)
AB.CNV.Boruta <- Boruta(response~.,AB.data.new)
# Install and load Boruta with dependency 'Ranger'
install.packages('Boruta')
install.packages('ranger')
library(Boruta)
library(ranger)
# Upload cell line data from your working directory
AB.data.new <- read.csv("AB CNV cells new.csv")
# Execute Boruta algorithm, focusing on response (to rucaparib?)
AB.CNV.Boruta <- Boruta(response~.,AB.data.new)
# View basic results
print(AB.CNV.Boruta)
View(AB.data.new)
# Visualise results with a boxplot (significant interactions coloured green)
plot(AB.CNV.Boruta)
setwd("E:/PhD/Experiments-Results/Bioinformatics/Cell lines/PARP_sensitivity_genomics/Primary cell lines/Boruta algorythm - Aleks/FINAL FOR THESIS")
setwd(
#setwd("Please insert your working directory filepath here")  # (Example working directory below)
setwd(
# Install and load Boruta with dependency 'Ranger'
install.packages('Boruta')
install.packages('ranger')
library(Boruta)
library(ranger)
# Upload cell line data from your working directory
AB.data.new <- read.csv("AB CNV cells new.csv")
# Execute Boruta algorithm, focusing on response (to rucaparib?)
AB.CNV.Boruta <- Boruta(response~.,AB.data.new)
# View basic results
print(AB.CNV.Boruta)
# Visualise results with a boxplot (significant interactions coloured green)
plot(AB.CNV.Boruta)
# Visualise results with a boxplot (significant interactions coloured green)
plot(AB.CNV.Boruta)
setwd(
#setwd("Please insert your working directory filepath here")  # (Example working directory below)
setwd(
# Install and load Boruta with dependency 'Ranger'
install.packages('Boruta')
install.packages('ranger')
library(Boruta)
library(ranger)
# Upload cell line data from your working directory
AB.data.new <- read.csv("AB CNV cells new.csv")
# Execute Boruta algorithm, focusing on response (to rucaparib?)
AB.CNV.Boruta <- Boruta(response~.,AB.data.new)
# View basic results
print(AB.CNV.Boruta)
# Visualise results with a boxplot (significant interactions coloured green)
plot(AB.CNV.Boruta)
View(AB.data.new)
View(AB.CNV.Boruta)
View(AB.data.new)
View(AB.CNV.Boruta)
View(AB.data.new)
rm(list = ls())
setwd("E:/PhD/Experiments-Results/Bioinformatics/Cell lines/PARP_sensitivity_genomics/Primary cell lines/Boruta algorythm - Aleks/FINAL FOR THESIS")
library(Boruta)
library(ranger)
library(tidyverse)
# Upload cell line data from your working directory
AB.data <- read.csv("AB CNV Ruc clono.csv")
# Upload cell line data from your working directory
AB.data <- read.csv("AB CNV cells Ruc clono.csv")
# Execute Boruta algorithm, focusing on response (to rucaparib)
AB.RucClono.Boruta <- Boruta(response~.,AB.data, maxRun =100,pValue=0.005)
# View basic results
print(AB.RucClono.Boruta)
# Visualise results with a boxplot (significant interactions coloured green)
plot(AB.MiST1.Boruta)
# Visualise results with a boxplot (significant interactions coloured green)
plot(AB.MiST1.Boruta)
# Visualise results with a boxplot (significant interactions coloured green)
plot(AB.RucClono.Boruta)
# Execute Boruta algorithm, focusing on response (to rucaparib)
AB.RucClono.Boruta <- Boruta(response~.,AB.data, maxRun =500,pValue=0.005)
# Install and load Boruta with dependency 'Ranger' and tidyverse package
install.packages('Boruta')
install.packages("Boruta")
install.packages('ranger')
install.packages('tidyverse')
library(Boruta)
library(ranger)
library(tidyverse)
# Execute Boruta algorithm, focusing on response (to rucaparib)
AB.RucClono.Boruta <- Boruta(response~.,AB.data, maxRun =500,pValue=0.005)
# View basic results
print(AB.RucClono.Boruta)
# Execute Boruta algorithm, focusing on response (to rucaparib)
AB.RucClono.Boruta <- Boruta(response~.,AB.data, maxRun =500,pValue=0.005)
# View basic results
print(AB.RucClono.Boruta)
#### Repeat Boruta execution up to 5,000 iterations with aooropriate p value e.g.p=0.005
successes <- 0
attempts <- 0
Boruta5k <- repeat{
repeat{
attempts <- attempts + 1
results <- Boruta(response ~., AB.data, maxRuns=500, pvalue=0.005)
duration <- as.numeric(results$timeTaken, units='secs')
print(paste0('Attempt ', attempts, ' lasted ', duration, ' seconds.'))
if (duration > 2){
print("Sufficient iterations reached");
successes <- successes + 1
imps.stats <- attStats(results) %>% filter(decision=='Confirmed') %>%
mutate('Execution'=successes)
imps.stats <- imps.stats %>% mutate('Variable'=rownames(imps.stats))
print(getSelectedAttributes(results))
print(results)
break
}
}
ifelse(successes==1, collated <- imps.stats, collated <- bind_rows(collated, imps.stats))
if (successes>=10) {;
break
}
}
#### Repeat Boruta execution up to 5,000 iterations with aooropriate p value e.g.p=0.005
successes <- 0
attempts <- 0
Boruta5k <- repeat{
repeat{
attempts <- attempts + 1
results <- Boruta(response ~., AB.data, maxRuns=500, pvalue=0.005)
duration <- as.numeric(results$timeTaken, units='secs')
print(paste0('Attempt ', attempts, ' lasted ', duration, ' seconds.'))
if (duration > 5){
print("Sufficient iterations reached");
successes <- successes + 1
imps.stats <- attStats(results) %>% filter(decision=='Confirmed') %>%
mutate('Execution'=successes)
imps.stats <- imps.stats %>% mutate('Variable'=rownames(imps.stats))
print(getSelectedAttributes(results))
print(results)
break
}
}
ifelse(successes==1, collated <- imps.stats, collated <- bind_rows(collated, imps.stats))
if (successes>=10) {;
break
}
}
#### Repeat Boruta execution up to 5,000 iterations with aooropriate p value e.g.p=0.005
successes <- 0
attempts <- 0
Boruta5k <- repeat{
repeat{
attempts <- attempts + 1
results <- Boruta(response ~., AB.data, maxRuns=500, pvalue=0.005)
duration <- as.numeric(results$timeTaken, units='secs')
print(paste0('Attempt ', attempts, ' lasted ', duration, ' seconds.'))
if (duration > 3){
print("Sufficient iterations reached");
successes <- successes + 1
imps.stats <- attStats(results) %>% filter(decision=='Confirmed') %>%
mutate('Execution'=successes)
imps.stats <- imps.stats %>% mutate('Variable'=rownames(imps.stats))
print(getSelectedAttributes(results))
print(results)
break
}
}
ifelse(successes==1, collated <- imps.stats, collated <- bind_rows(collated, imps.stats))
if (successes>=10) {;
break
}
}
#### Repeat Boruta execution up to 5,000 iterations with aooropriate p value e.g.p=0.005
successes <- 0
attempts <- 0
Boruta5k <- repeat{
repeat{
attempts <- attempts + 1
results <- Boruta(response ~., AB.data, maxRuns=500, pvalue=0.005)
duration <- as.numeric(results$timeTaken, units='secs')
print(paste0('Attempt ', attempts, ' lasted ', duration, ' seconds.'))
if (duration > 4.5){
print("Sufficient iterations reached");
successes <- successes + 1
imps.stats <- attStats(results) %>% filter(decision=='Confirmed') %>%
mutate('Execution'=successes)
imps.stats <- imps.stats %>% mutate('Variable'=rownames(imps.stats))
print(getSelectedAttributes(results))
print(results)
break
}
}
ifelse(successes==1, collated <- imps.stats, collated <- bind_rows(collated, imps.stats))
if (successes>=10) {;
break
}
}
write.csv(collated, 'CNV cells Rucaparic 500 interations p 0.005 A.csv')
# Add a column containing consistent variable names
Boruta5k.results <- collated
### Produce graphs
## Condense by variable counts
imp.counts <- summarise(Boruta5k.results %>% group_by(Variable), 'Count' = n())
### Produce graphs
## Condense by variable counts
imp.counts <- summarise(Boruta5k.results %>% group_by(Variable), 'Count' = n())
# Plot variable counts
imp.count.plot <- ggplot(imp.counts, aes(Variable, Count)) +
geom_col(fill='darkgreen') + theme_classic() + theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
scale_y_continuous(breaks=seq(0,150,30)) + labs(title='MiST1 CNV loss - Boruta Frequency of Importance')
## Visualise median normalised hits
normHits.plot <- ggplot(Boruta5k.results, aes(Variable, normHits)) +
geom_boxplot() + theme_classic() + theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(title='Cell lines CNV - Boruta Normalised Hits')
## Visualise median normalised hits
normHits.plot <- ggplot(Boruta5k.results, aes(Variable, normHits)) +
geom_boxplot() + theme_classic() + theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(title='Mesothelioma primary cell lines CNV - Boruta Normalised Hits')
plot(imp.count.plot)
plot(normHits.plot)
write.csv(imp.counts, 'CNV cells Rucaparic 500 interations p 0.005 B.csv')
write.csv(imps.stats, 'CNV cells Rucaparic 500 interations p 0.005 C.csv')
# Plot variable counts
imp.count.plot <- ggplot(imp.counts, aes(Variable, Count)) +
geom_col(fill='darkgreen') + theme_classic() + theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
scale_y_continuous(breaks=seq(0,150,30)) + labs(title='Mesothelioma primary cell lines CNV loss - Boruta Frequency of Importance')
plot(imp.count.plot)
#### Repeat Boruta execution up to 5,000 iterations with aooropriate p value e.g.p=0.005
successes <- 0
attempts <- 0
Boruta5k <- repeat{
repeat{
attempts <- attempts + 1
results <- Boruta(response ~., AB.data, maxRuns=500, pvalue=0.0001)
duration <- as.numeric(results$timeTaken, units='secs')
print(paste0('Attempt ', attempts, ' lasted ', duration, ' seconds.'))
if (duration > 4.5){
print("Sufficient iterations reached");
successes <- successes + 1
imps.stats <- attStats(results) %>% filter(decision=='Confirmed') %>%
mutate('Execution'=successes)
imps.stats <- imps.stats %>% mutate('Variable'=rownames(imps.stats))
print(getSelectedAttributes(results))
print(results)
break
}
}
ifelse(successes==1, collated <- imps.stats, collated <- bind_rows(collated, imps.stats))
if (successes>=10) {;
break
}
}
#### Repeat Boruta execution up to 5,000 iterations with aooropriate p value e.g.p=0.005
successes <- 0
attempts <- 0
Boruta5k <- repeat{
repeat{
attempts <- attempts + 1
results <- Boruta(response ~., AB.data, maxRuns=500, pvalue=0.001)
duration <- as.numeric(results$timeTaken, units='secs')
print(paste0('Attempt ', attempts, ' lasted ', duration, ' seconds.'))
if (duration > 4.5){
print("Sufficient iterations reached");
successes <- successes + 1
imps.stats <- attStats(results) %>% filter(decision=='Confirmed') %>%
mutate('Execution'=successes)
imps.stats <- imps.stats %>% mutate('Variable'=rownames(imps.stats))
print(getSelectedAttributes(results))
print(results)
break
}
}
ifelse(successes==1, collated <- imps.stats, collated <- bind_rows(collated, imps.stats))
if (successes>=10) {;
break
}
}
rm(list = ls())
library(Boruta)
library(ranger)
library(tidyverse)
# Upload cell line data from your working directory
AB.data <- read.csv("AB CNV cells Ruc clono.csv")
# Execute Boruta algorithm, focusing on response (to rucaparib)
AB.RucClono.Boruta <- Boruta(response~.,AB.data, maxRun =500,pValue=0.005)
# View basic results
print(AB.RucClono.Boruta)
# Execute Boruta algorithm, focusing on response (to rucaparib)
AB.RucClono.Boruta <- Boruta(response~.,AB.data, maxRun =500,pValue=0.0001)
# View basic results
print(AB.RucClono.Boruta)
#### Repeat Boruta execution up to 5,000 iterations with aooropriate p value e.g.p=0.005
successes <- 0
attempts <- 0
Boruta5k <- repeat{
repeat{
attempts <- attempts + 1
results <- Boruta(response ~., AB.data, maxRuns=500, pvalue=0.0001)
duration <- as.numeric(results$timeTaken, units='secs')
print(paste0('Attempt ', attempts, ' lasted ', duration, ' seconds.'))
if (duration > 2){
print("Sufficient iterations reached");
successes <- successes + 1
imps.stats <- attStats(results) %>% filter(decision=='Confirmed') %>%
mutate('Execution'=successes)
imps.stats <- imps.stats %>% mutate('Variable'=rownames(imps.stats))
print(getSelectedAttributes(results))
print(results)
break
}
}
ifelse(successes==1, collated <- imps.stats, collated <- bind_rows(collated, imps.stats))
if (successes>=10) {;
break
}
}
# Add a column containing consistent variable names
Boruta5k.results <- collated
### Produce graphs
## Condense by variable counts
imp.counts <- summarise(Boruta5k.results %>% group_by(Variable), 'Count' = n())
# Plot variable counts
imp.count.plot <- ggplot(imp.counts, aes(Variable, Count)) +
geom_col(fill='darkgreen') + theme_classic() + theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
scale_y_continuous(breaks=seq(0,150,30)) + labs(title='Mesothelioma primary cell lines CNV loss - Boruta Frequency of Importance')
## Visualise median normalised hits
normHits.plot <- ggplot(Boruta5k.results, aes(Variable, normHits)) +
geom_boxplot() + theme_classic() + theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(title='Mesothelioma primary cell lines CNV - Boruta Normalised Hits')
plot(imp.count.plot)
plot(normHits.plot)
write.csv(collated, CNV cell lines 200 iterations p 0.0001 A. csv)
write.csv(collated, 'CNV cell lines 200 iterations p 0.0001 A'. csv)
write.csv(collated, 'CNV cell lines 200 iterations p 0.0001 A. csv')
write.csv(imps.stats, CNV cell lines 200 iterations p 0.0001 B. csv)
write.csv(imps.stats, 'CNV cell lines 200 iterations p 0.0001 B. csv')
write.csv(imp.counts, 'CNV cell lines 200 iterations p 0.0001 C. csv')
plot(imp.count.plot)
View(imp.counts)
View(imps.stats)
write.csv(imps.stats, 'CNV cell lines 200 iterations p 0.0001A.csv')
write.csv(collated, 'CNV cell lines 200 iterations p 0.0001B.csv')
write.csv(imp.counts, 'CNV cell lines 200 iterations p 0.0001C.csv')
#### Repeat Boruta execution up to 5,000 iterations with aooropriate p value e.g.p=0.005
successes <- 0
attempts <- 0
Boruta5k <- repeat{
repeat{
attempts <- attempts + 1
results <- Boruta(response ~., AB.data, maxRuns=500, pvalue=0.0001)
duration <- as.numeric(results$timeTaken, units='secs')
print(paste0('Attempt ', attempts, ' lasted ', duration, ' seconds.'))
if (duration > 4.5){
print("Sufficient iterations reached");
successes <- successes + 1
imps.stats <- attStats(results) %>% filter(decision=='Confirmed') %>%
mutate('Execution'=successes)
imps.stats <- imps.stats %>% mutate('Variable'=rownames(imps.stats))
print(getSelectedAttributes(results))
print(results)
break
}
}
ifelse(successes==1, collated <- imps.stats, collated <- bind_rows(collated, imps.stats))
if (successes>=10) {;
break
}
}
write.csv(collated, 'CNV cell lines 500 iterations p 0.0001A.csv')
write.csv(imp.counts, 'CNV cell lines 500 iterations p 0.0001B.csv')
# Add a column containing consistent variable names
Boruta5k.results <- collated
### Produce graphs
## Condense by variable counts
imp.counts <- summarise(Boruta5k.results %>% group_by(Variable), 'Count' = n())
imp.count.plot
## Visualise median normalised hits
normHits.plot <- ggplot(Boruta5k.results, aes(Variable, normHits)) +
geom_boxplot() + theme_classic() + theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(title='Mesothelioma primary cell lines CNV - Boruta Normalised Hits')
plot(imp.count.plot)
plot(normHits.plot)
write.csv(collated, 'CNV cell lines 500 iterations p 0.0001A.csv')
write.csv(imps.stats, 'CNV cell lines 500 iterations p 0.0001B.csv')
write.csv(imp.counts, 'CNV cell lines 500 iterations p 0.0001C.csv')
plot(imp.count.plot)
