setwd("E:/PhD/Experiments-Results/Bioinformatics/Cell lines/PARP_sensitivity_genomics/Primary cell lines/Boruta algorythm - Aleks/FINAL FOR THESIS/Clonogenic assay/Rucaparib response Boruta/25K gene data set/CNV")
library(Boruta)
library(ranger)
library(tidyverse)
# Upload cell line data from your working directory
AB.data <- read.csv("CNV gain.csv")
# Execute Boruta algorithm, focusing on response (to rucaparib)
AB.RucClono.Boruta <- Boruta(response~.,AB.data, maxRun =500,pValue=0.05)
# View basic results
print(AB.RucClono.Boruta)
# Execute Boruta algorithm, focusing on response (to rucaparib)
AB.RucClono.Boruta <- Boruta(response~.,AB.data, maxRun =500,pValue=0.05)
# View basic results
print(AB.RucClono.Boruta)
# Execute Boruta algorithm, focusing on response (to rucaparib)
AB.RucClono.Boruta <- Boruta(response~.,AB.data, maxRun =500,pValue=0.05)
library(Boruta)
library(ranger)
library(tidyverse)
# Upload cell line data from your working directory
AB.data <- read.csv("CNV gain.csv")
# Execute Boruta algorithm, focusing on response (to rucaparib)
AB.RucClono.Boruta <- Boruta(response~.,AB.data, maxRun =100,pValue=0.05)
# View basic results
print(AB.RucClono.Boruta)
rm(list = ls())
setwd("E:/PhD/Experiments-results/Bioinformatics/Cell lines/PARP_sensitivity_genomics/Primary cell lines/Boruta algorythm - Aleks/FINAL FOR THESIS/Clonogenic assay/Rucaparib response Boruta/25K gene data set/CNV")
library(Boruta)
library(ranger)
library(tidyverse)
# Upload cell line data from your working directory
AB.data <- read.csv("CNV loss 1.csv")
# Execute Boruta algorithm, focusing on response (to rucaparib)
AB.RucClono.Boruta <- Boruta(response~.,AB.data, maxRun =100,pValue=0.05)
# View basic results
print(AB.RucClono.Boruta)
# Execute Boruta algorithm, focusing on response (to rucaparib)
AB.RucClono.Boruta <- Boruta(response~.,AB.data, maxRun =500,pValue=0.05)
# View basic results
print(AB.RucClono.Boruta)
#### Repeat Boruta execution up to 5,000 iterations with aooropriate p value e.g.p=0.005
successes <- 0
attempts <- 0
Boruta5k <- repeat{
repeat{
attempts <- attempts + 1
results <- Boruta(response ~., AB.data, maxRuns=500, pvalue=0.05)
duration <- as.numeric(results$timeTaken, units='secs')
print(paste0('Attempt ', attempts, ' lasted ', duration, ' seconds.'))
if (duration > 50){
print("Sufficient iterations reached");
successes <- successes + 1
imps.stats <- attStats(results) %>% filter(decision=='Confirmed') %>%
mutate('Execution'=successes)
imps.stats <- imps.stats %>% mutate('Variable'=rownames(imps.stats))
print(getSelectedAttributes(results))
print(results)
break
}
}
ifelse(successes==1, collated <- imps.stats, collated <- bind_rows(collated, imps.stats))
if (successes>=10) {;
break
}
}
setwd("E:/PhD/Experiments-results/Bioinformatics/Cell lines/PARP_sensitivity_genomics/Primary cell lines/Boruta algorythm - Aleks/FINAL FOR THESIS/Clonogenic assay/Rucaparib response Boruta/25K gene data set/CNV")
#### Repeat Boruta execution up to 5,000 iterations with aooropriate p value e.g.p=0.005
successes <- 0
attempts <- 0
Boruta5k <- repeat{
repeat{
attempts <- attempts + 1
results <- Boruta(response ~., AB.data, maxRuns=500, pvalue=0.05)
duration <- as.numeric(results$timeTaken, units='secs')
print(paste0('Attempt ', attempts, ' lasted ', duration, ' seconds.'))
if (duration > 40){
print("Sufficient iterations reached");
successes <- successes + 1
imps.stats <- attStats(results) %>% filter(decision=='Confirmed') %>%
mutate('Execution'=successes)
imps.stats <- imps.stats %>% mutate('Variable'=rownames(imps.stats))
print(getSelectedAttributes(results))
print(results)
break
}
}
ifelse(successes==1, collated <- imps.stats, collated <- bind_rows(collated, imps.stats))
if (successes>=10) {;
break
}
}
library(Boruta)
library(ranger)
library(tidyverse)
# Execute Boruta algorithm, focusing on response (to rucaparib)
AB.RucClono.Boruta <- Boruta(response~.,AB.data, maxRun =500,pValue=0.05)
(AB.RucClono.Boruta)
# View basic results
print(AB.RucClono.Boruta)
#### Repeat Boruta execution up to 5,000 iterations with aooropriate p value e.g.p=0.005
successes <- 0
attempts <- 0
Boruta5k <- repeat{
repeat{
attempts <- attempts + 1
results <- Boruta(response ~., AB.data, maxRuns=500, pvalue=0.05)
duration <- as.numeric(results$timeTaken, units='secs')
print(paste0('Attempt ', attempts, ' lasted ', duration, ' seconds.'))
if (duration > 40){
print("Sufficient iterations reached");
successes <- successes + 1
imps.stats <- attStats(results) %>% filter(decision=='Confirmed') %>%
mutate('Execution'=successes)
imps.stats <- imps.stats %>% mutate('Variable'=rownames(imps.stats))
print(getSelectedAttributes(results))
print(results)
break
}
}
ifelse(successes==1, collated <- imps.stats, collated <- bind_rows(collated, imps.stats))
if (successes>=10) {;
break
}
}
rm(list = ls())
setwd("E:/PhD/Experiments-results/Bioinformatics/Cell lines/PARP_sensitivity_genomics/Primary cell lines/Boruta algorythm - Aleks/FINAL FOR THESIS/Clonogenic assay/Rucaparib response Boruta/25K gene data set/CNV")
library(Boruta)
library(ranger)
library(tidyverse)
# Upload cell line data from your working directory
AB.data <- read.csv("CNV loss 2.csv")
# Execute Boruta algorithm, focusing on response (to rucaparib)
AB.RucClono.Boruta <- Boruta(response~.,AB.data, maxRun =500,pValue=0.05)
# View basic results
print(AB.RucClono.Boruta)
# Execute Boruta algorithm, focusing on response (to rucaparib)
AB.RucClono.Boruta <- Boruta(response~.,AB.data, maxRun =5000,pValue=0.05)
# View basic results
print(AB.RucClono.Boruta)
#### Repeat Boruta execution up to 5,000 iterations with aooropriate p value e.g.p=0.005
successes <- 0
attempts <- 0
Boruta5k <- repeat{
repeat{
attempts <- attempts + 1
results <- Boruta(response ~., AB.data, maxRuns=500, pvalue=0.05)
duration <- as.numeric(results$timeTaken, units='secs')
print(paste0('Attempt ', attempts, ' lasted ', duration, ' seconds.'))
if (duration > 27){
print("Sufficient iterations reached");
successes <- successes + 1
imps.stats <- attStats(results) %>% filter(decision=='Confirmed') %>%
mutate('Execution'=successes)
imps.stats <- imps.stats %>% mutate('Variable'=rownames(imps.stats))
print(getSelectedAttributes(results))
print(results)
break
}
}
ifelse(successes==1, collated <- imps.stats, collated <- bind_rows(collated, imps.stats))
if (successes>=10) {;
break
}
}
# Add a column containing consistent variable names
Boruta5k.results <- collated
# Plot variable counts
imp.count.plot <- ggplot(imp.counts, aes(Variable, Count)) +
geom_col(fill='darkgreen') + theme_classic() + theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
scale_y_continuous(breaks=seq(0,150,30)) + labs(title='Mesothelioma primary cell lines CNV  - Boruta Frequency of Importance')
### Produce graphs
## Condense by variable counts
imp.counts <- summarise(Boruta5k.results %>% group_by(Variable), 'Count' = n())
# Plot variable counts
imp.count.plot <- ggplot(imp.counts, aes(Variable, Count)) +
geom_col(fill='darkgreen') + theme_classic() + theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
scale_y_continuous(breaks=seq(0,150,30)) + labs(title='Mesothelioma primary cell lines CNV  - Boruta Frequency of Importance')
## Visualise median normalised hits
normHits.plot <- ggplot(Boruta5k.results, aes(Variable, normHits)) +
geom_boxplot() + theme_classic() + theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(title='Mesothelioma primary cell lines CNV - Boruta Normalised Hits')
plot(imp.count.plot)
plot(normHits.plot)
write.csv(collated, 'CNV loss 2A.csv')
write.csv(imps.stats, 'CNV loss 2B.csv')
write.csv(imp.counts, 'CNV loss 2C.csv')
View(imps.stats)
#### Repeat Boruta execution up to 5,000 iterations with aooropriate p value e.g.p=0.005
successes <- 0
attempts <- 0
Boruta5k <- repeat{
repeat{
attempts <- attempts + 1
results <- Boruta(response ~., AB.data, maxRuns=5000, pvalue=0.05)
duration <- as.numeric(results$timeTaken, units='secs')
print(paste0('Attempt ', attempts, ' lasted ', duration, ' seconds.'))
if (duration > 40){
print("Sufficient iterations reached");
successes <- successes + 1
imps.stats <- attStats(results) %>% filter(decision=='Confirmed') %>%
mutate('Execution'=successes)
imps.stats <- imps.stats %>% mutate('Variable'=rownames(imps.stats))
print(getSelectedAttributes(results))
print(results)
break
}
}
ifelse(successes==1, collated <- imps.stats, collated <- bind_rows(collated, imps.stats))
if (successes>=10) {;
break
}
}
# Add a column containing consistent variable names
Boruta5k.results <- collated
### Produce graphs
## Condense by variable counts
imp.counts <- summarise(Boruta5k.results %>% group_by(Variable), 'Count' = n())
# Plot variable counts
imp.count.plot <- ggplot(imp.counts, aes(Variable, Count)) +
geom_col(fill='darkgreen') + theme_classic() + theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
scale_y_continuous(breaks=seq(0,150,30)) + labs(title='Mesothelioma primary cell lines CNV  - Boruta Frequency of Importance')
## Visualise median normalised hits
normHits.plot <- ggplot(Boruta5k.results, aes(Variable, normHits)) +
geom_boxplot() + theme_classic() + theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(title='Mesothelioma primary cell lines CNV - Boruta Normalised Hits')
plot(imp.count.plot)
plot(normHits.plot)
write.csv(collated, 'CNV loss 2 A.csv' )
write.csv(imps.stats, 'CNV loss 2 B.csv' )
write.csv(imp.counts., 'CNV loss 2 C.csv' )
write.csv(imp.counts, 'CNV loss 2 C.csv' )
#### Repeat Boruta execution up to 5,000 iterations with aooropriate p value e.g.p=0.005
successes <- 0
attempts <- 0
Boruta5k <- repeat{
repeat{
attempts <- attempts + 1
results <- Boruta(response ~., AB.data, maxRuns=5000, pvalue=0.0001)
duration <- as.numeric(results$timeTaken, units='secs')
print(paste0('Attempt ', attempts, ' lasted ', duration, ' seconds.'))
if (duration > 40){
print("Sufficient iterations reached");
successes <- successes + 1
imps.stats <- attStats(results) %>% filter(decision=='Confirmed') %>%
mutate('Execution'=successes)
imps.stats <- imps.stats %>% mutate('Variable'=rownames(imps.stats))
print(getSelectedAttributes(results))
print(results)
break
}
}
ifelse(successes==1, collated <- imps.stats, collated <- bind_rows(collated, imps.stats))
if (successes>=10) {;
break
}
}
# Add a column containing consistent variable names
Boruta5k.results <- collated
### Produce graphs
## Condense by variable counts
imp.counts <- summarise(Boruta5k.results %>% group_by(Variable), 'Count' = n())
# Plot variable counts
imp.count.plot <- ggplot(imp.counts, aes(Variable, Count)) +
geom_col(fill='darkgreen') + theme_classic() + theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
scale_y_continuous(breaks=seq(0,150,30)) + labs(title='Mesothelioma primary cell lines CNV  - Boruta Frequency of Importance')
## Visualise median normalised hits
normHits.plot <- ggplot(Boruta5k.results, aes(Variable, normHits)) +
geom_boxplot() + theme_classic() + theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(title='Mesothelioma primary cell lines CNV - Boruta Normalised Hits')
plot(imp.count.plot)
#### Repeat Boruta execution up to 5,000 iterations with aooropriate p value e.g.p=0.005
successes <- 0
attempts <- 0
Boruta5k <- repeat{
repeat{
attempts <- attempts + 1
results <- Boruta(response ~., AB.data, maxRuns=5000, pvalue=0.0001)
duration <- as.numeric(results$timeTaken, units='secs')
print(paste0('Attempt ', attempts, ' lasted ', duration, ' seconds.'))
if (duration > 70){
print("Sufficient iterations reached");
successes <- successes + 1
imps.stats <- attStats(results) %>% filter(decision=='Confirmed') %>%
mutate('Execution'=successes)
imps.stats <- imps.stats %>% mutate('Variable'=rownames(imps.stats))
print(getSelectedAttributes(results))
print(results)
break
}
}
ifelse(successes==1, collated <- imps.stats, collated <- bind_rows(collated, imps.stats))
if (successes>=10) {;
break
}
}
# Add a column containing consistent variable names
Boruta5k.results <- collated
### Produce graphs
## Condense by variable counts
imp.counts <- summarise(Boruta5k.results %>% group_by(Variable), 'Count' = n())
# Plot variable counts
imp.count.plot <- ggplot(imp.counts, aes(Variable, Count)) +
geom_col(fill='darkgreen') + theme_classic() + theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
scale_y_continuous(breaks=seq(0,150,30)) + labs(title='Mesothelioma primary cell lines CNV  - Boruta Frequency of Importance')
## Visualise median normalised hits
normHits.plot <- ggplot(Boruta5k.results, aes(Variable, normHits)) +
geom_boxplot() + theme_classic() + theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(title='Mesothelioma primary cell lines CNV - Boruta Normalised Hits')
plot(imp.count.plot)
plot(normHits.plot)
write.csv(collated, 'CSV loss 2 A.csv')
write.csv(imps.stats, 'CSV loss 2 B.csv')
write.csv(imp.counts, 'CSV loss 2 C.csv')
rm(list = ls())
# Upload cell line data from your working directory
AB.data <- read.csv("CNV loss 1.csv")
library(Boruta)
library(ranger)
library(tidyverse)
#### Repeat Boruta execution up to 5,000 iterations with aooropriate p value e.g.p=0.005
successes <- 0
attempts <- 0
Boruta5k <- repeat{
repeat{
attempts <- attempts + 1
results <- Boruta(response ~., AB.data, maxRuns=5000, pvalue=0.0001)
duration <- as.numeric(results$timeTaken, units='secs')
print(paste0('Attempt ', attempts, ' lasted ', duration, ' seconds.'))
if (duration > 70){
print("Sufficient iterations reached");
successes <- successes + 1
imps.stats <- attStats(results) %>% filter(decision=='Confirmed') %>%
mutate('Execution'=successes)
imps.stats <- imps.stats %>% mutate('Variable'=rownames(imps.stats))
print(getSelectedAttributes(results))
print(results)
break
}
}
ifelse(successes==1, collated <- imps.stats, collated <- bind_rows(collated, imps.stats))
if (successes>=10) {;
break
}
}
rm(list = ls())
setwd("E:/PhD/Experiments-results/Bioinformatics/Cell lines/PARP_sensitivity_genomics/Primary cell lines/Boruta algorythm - Aleks/FINAL FOR THESIS/Clonogenic assay/Rucaparib response Boruta/25K gene data set/CNV")
library(Boruta)
library(ranger)
library(tidyverse)
# Upload cell line data from your working directory
AB.data <- read.csv("CNV loss 1.csv")
# Execute Boruta algorithm, focusing on response (to rucaparib)
AB.RucClono.Boruta <- Boruta(response~.,AB.data, maxRun =500,pValue=0.05)
# View basic results
print(AB.RucClono.Boruta)
# Upload cell line data from your working directory
AB.data <- read.csv("CNV loss 1.csv")
#### Repeat Boruta execution up to 5,000 iterations with aooropriate p value e.g.p=0.005
successes <- 0
attempts <- 0
Boruta5k <- repeat{
repeat{
attempts <- attempts + 1
results <- Boruta(response ~., AB.data, maxRuns=500, pvalue=0.05)
duration <- as.numeric(results$timeTaken, units='secs')
print(paste0('Attempt ', attempts, ' lasted ', duration, ' seconds.'))
if (duration > 44){
print("Sufficient iterations reached");
successes <- successes + 1
imps.stats <- attStats(results) %>% filter(decision=='Confirmed') %>%
mutate('Execution'=successes)
imps.stats <- imps.stats %>% mutate('Variable'=rownames(imps.stats))
print(getSelectedAttributes(results))
print(results)
break
}
}
ifelse(successes==1, collated <- imps.stats, collated <- bind_rows(collated, imps.stats))
if (successes>=10) {;
break
}
}
# Add a column containing consistent variable names
Boruta5k.results <- collated
### Produce graphs
## Condense by variable counts
imp.counts <- summarise(Boruta5k.results %>% group_by(Variable), 'Count' = n())
# Plot variable counts
imp.count.plot <- ggplot(imp.counts, aes(Variable, Count)) +
geom_col(fill='darkgreen') + theme_classic() + theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
scale_y_continuous(breaks=seq(0,150,30)) + labs(title='Mesothelioma primary cell lines CNV ACA - Boruta Frequency of Importance')
## Visualise median normalised hits
normHits.plot <- ggplot(Boruta5k.results, aes(Variable, normHits)) +
geom_boxplot() + theme_classic() + theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(title='Mesothelioma primary cell lines CNV ACA - Boruta Normalised Hits')
plot(imp.count.plot)
plot(normHits.plot)
write.csv(collated,'CNV loss 1A.csv')
write.csv(imps.stats,'CNV loss 1B.csv')
write.csv(imp.counts,'CNV loss 1C.csv')
