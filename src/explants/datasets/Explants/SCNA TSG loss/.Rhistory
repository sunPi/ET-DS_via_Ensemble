rm(list = ls())
setwd("F:/PhD/Experiments-Results/IHC MEDUSA Explants/Staining data/Positive cell detection/Excel analysis/Statistics/Boruta/All explants")
library(Boruta)
library(ranger)
library(tidyverse)
# Upload cell line data from your working directory
AB.data <- read.csv("MEDUSA TSG loss DDR.csv")
# Execute Boruta algorithm, focusing on response (to rucaparib)
AB.MEDUSA.Boruta <- Boruta(response~.,AB.data, maxRun =500,pValue=0.05)
# Execute Boruta algorithm, focusing on response (to rucaparib)
AB.MEDUSA.Boruta <- Boruta(response~.,AB.data, maxRun =500,pValue=0.05)
# Execute Boruta algorithm, focusing on response (to rucaparib)
AB.MiST1.Boruta <- Boruta(response~.,AB.data, maxRun =500,pValue=0.05)
library(Boruta)
library(ranger)
library(tidyverse)
# Upload cell line data from your working directory
AB.data <- read.csv("MEDUSA TSG loss DDR.csv")
# Execute Boruta algorithm, focusing on response (to rucaparib)
AB.Medusa.Boruta <- Boruta(response~.,AB.data, maxRun =500,pValue=0.05)
# Upload cell line data from your working directory
AB.data <- read.csv("MEDUSA TSG loss DDR.csv")
# Execute Boruta algorithm, focusing on response (to rucaparib)
AB.Medusa.Boruta <- Boruta(response~.,AB.data, maxRun =500,pValue=0.05)
# View basic results
print(AB.Medusa.Boruta)
# Visualise results with a boxplot (significant interactions coloured green)
plot(AB.MiST1.Boruta)
# Visualise results with a boxplot (significant interactions coloured green)
plot(AB.Medusa.Boruta)
# Execute Boruta algorithm, focusing on response (to rucaparib)
AB.Medusa.Boruta <- Boruta(response~.,AB.data, maxRun =5000,pValue=0.05)
# View basic results
print(AB.Medusa.Boruta)
# Execute Boruta algorithm, focusing on response (to rucaparib)
AB.Medusa.Boruta <- Boruta(response~.,AB.data, maxRun =5000,pValue=0.0001)
# View basic results
print(AB.Medusa.Boruta)
getSelectedAttributes(AB.Medusa.Boruta)
#### Repeat Boruta execution up to 5,000 iterations with aooropriate p value e.g.p=0.005
successes <- 0
attempts <- 0
Boruta5k <- repeat{
repeat{
attempts <- attempts + 1
results <- Boruta(response ~., AB.data, maxRuns=5000, pvalue=0.0001)
duration <- as.numeric(results$timeTaken, units='secs')
print(paste0('Attempt ', attempts, ' lasted ', duration, ' seconds.'))
if (duration > 10){
print("Sufficient iterations reached");
successes <- successes + 1
imps.stats <- attStats(results) %>% filter(decision=='Confirmed') %>%
mutate('Execution'=successes)
imps.stats <- imps.stats %>% mutate('Variable'=rownames(imps.stats))
print(getSelectedAttributes(results))
print(results)
break
}
}
ifelse(successes==1, collated <- imps.stats, collated <- bind_rows(collated, imps.stats))
if (successes>=10) {;
break
}
}
View(imps.stats)
# Add a column containing consistent variable names
Boruta5k.results <- collated
### Produce graphs
## Condense by variable counts
imp.counts <- summarise(Boruta5k.results %>% group_by(Variable), 'Count' = n())
# Plot variable counts
imp.count.plot <- ggplot(imp.counts, aes(Variable, Count)) +
geom_col(fill='darkgreen') + theme_classic() + theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
scale_y_continuous(breaks=seq(0,150,30)) + labs(title='MEDUSA SCNA loss - Boruta Frequency of Importance')
## Visualise median normalised hits
normHits.plot <- ggplot(Boruta5k.results, aes(Variable, normHits)) +
geom_boxplot() + theme_classic() + theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(title='MEDUSA SCNA loss - Boruta Normalised Hits')
plot(imp.count.plot)
plot(normHits.plot)
write.csv(collated,'MEDUSA A.csv')
write.csv(imps.stats,'MEDUSA B.csv')
write.csv(imp.counts,'MEDUSA C.csv')
#### Repeat Boruta execution up to 5,000 iterations with aooropriate p value e.g.p=0.005
successes <- 0
attempts <- 0
Boruta5k <- repeat{
repeat{
attempts <- attempts + 1
results <- Boruta(response ~., AB.data, maxRuns=5000, pvalue=0.05)
duration <- as.numeric(results$timeTaken, units='secs')
print(paste0('Attempt ', attempts, ' lasted ', duration, ' seconds.'))
if (duration > 10){
print("Sufficient iterations reached");
successes <- successes + 1
imps.stats <- attStats(results) %>% filter(decision=='Confirmed') %>%
mutate('Execution'=successes)
imps.stats <- imps.stats %>% mutate('Variable'=rownames(imps.stats))
print(getSelectedAttributes(results))
print(results)
break
}
}
ifelse(successes==1, collated <- imps.stats, collated <- bind_rows(collated, imps.stats))
if (successes>=10) {;
break
}
}
#### Repeat Boruta execution up to 5,000 iterations with aooropriate p value e.g.p=0.005
successes <- 0
attempts <- 0
Boruta5k <- repeat{
repeat{
attempts <- attempts + 1
results <- Boruta(response ~., AB.data, maxRuns=5000, pvalue=0.05)
duration <- as.numeric(results$timeTaken, units='secs')
print(paste0('Attempt ', attempts, ' lasted ', duration, ' seconds.'))
if (duration > 50){
print("Sufficient iterations reached");
successes <- successes + 1
imps.stats <- attStats(results) %>% filter(decision=='Confirmed') %>%
mutate('Execution'=successes)
imps.stats <- imps.stats %>% mutate('Variable'=rownames(imps.stats))
print(getSelectedAttributes(results))
print(results)
break
}
}
ifelse(successes==1, collated <- imps.stats, collated <- bind_rows(collated, imps.stats))
if (successes>=10) {;
break
}
}
#locad factoextra
install.packages("factoextra")
#load factoextra
library(factoextra)
data(decathlon2)
decathlon2.active <- decathlon2[1:23, 1:10]
head(decathlon2.active[, 1:6])
#compute PCA
res.pca <- prcomp(decathlon2.active, scale = TRUE)
#Visualize eigenvalues (scree plot). Show the percentage of variances explained by each principal component.
fviz_eig(res.pca)
#Graph of individuals. Individuals with a similar profile are grouped together.
fviz_pca_ind(res.pca,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
#Graph of variables. Positive correlated variables point to the same side of the plot.
#Negative correlated variables point to opposite sides of the graph.
fviz_pca_var(res.pca,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
#Biplot of individuals and variables
fviz_pca_biplot(res.pca, repel = TRUE,
col.var = "#2E9FDF", # Variables color
col.ind = "#696969"  # Individuals color
)
#access to PCA results
library(factoextra)
# Eigenvalues
eig.val <- get_eigenvalue(res.pca)
eig.val
# Results for Variables
res.var <- get_pca_var(res.pca)
res.var$coord          # Coordinates
res.var$contrib        # Contributions to the PCs
res.var$cos2           # Quality of representation
# Results for individuals
res.ind <- get_pca_ind(res.pca)
res.ind$coord          # Coordinates
res.ind$contrib        # Contributions to the PCs
res.ind$cos2           # Quality of representation
#colour by group
groups <- as.factor(decathlon2$Competition[1:23])
fviz_pca_ind(res.pca,
col.ind = groups, # color by groups
palette = c("#00AFBB",  "#FC4E07"),
addEllipses = TRUE, # Concentration ellipses
ellipse.type = "confidence",
legend.title = "Groups",
repel = TRUE
)
View(res.ind)
View(res.var)
View(res.pca)
View(res.ind)
View(normHits.plot)
View(imps.stats)
View(imp.counts)
View(imp.count.plot)
View(decathlon2)
View(decathlon2.active)
View(eig.val)
View(imp.count.plot)
View(decathlon2)
data(AB.data)
rm(list = ls())
setwd("F:/PhD/Experiments-Results/IHC MEDUSA Explants/Staining data/Positive cell detection/Excel analysis/Statistics/Boruta/All explants")
library(Boruta)
library(ranger)
library(tidyverse)
# Upload cell line data from your working directory
AB.data <- read.csv("MEDUSA TSG loss DDR.csv")
# Execute Boruta algorithm, focusing on response (to rucaparib)
AB.Medusa.Boruta <- Boruta(response~.,AB.data, maxRun =5000,pValue=0.05)
# View basic results
print(AB.Medusa.Boruta)
#### Repeat Boruta execution up to 5,000 iterations with aooropriate p value e.g.p=0.005
successes <- 0
attempts <- 0
Boruta5k <- repeat{
repeat{
attempts <- attempts + 1
results <- Boruta(response ~., AB.data, maxRuns=5000, pvalue=0.05)
duration <- as.numeric(results$timeTaken, units='secs')
print(paste0('Attempt ', attempts, ' lasted ', duration, ' seconds.'))
if (duration > 50){
print("Sufficient iterations reached");
successes <- successes + 1
imps.stats <- attStats(results) %>% filter(decision=='Confirmed') %>%
mutate('Execution'=successes)
imps.stats <- imps.stats %>% mutate('Variable'=rownames(imps.stats))
print(getSelectedAttributes(results))
print(results)
break
}
}
ifelse(successes==1, collated <- imps.stats, collated <- bind_rows(collated, imps.stats))
if (successes>=10) {;
break
}
}
# Add a column containing consistent variable names
Boruta5k.results <- collated
### Produce graphs
## Condense by variable counts
imp.counts <- summarise(Boruta5k.results %>% group_by(Variable), 'Count' = n())
# Plot variable counts
imp.count.plot <- ggplot(imp.counts, aes(Variable, Count)) +
geom_col(fill='darkgreen') + theme_classic() + theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
scale_y_continuous(breaks=seq(0,150,30)) + labs(title='MEDUSA SCNA loss - Boruta Frequency of Importance')
## Visualise median normalised hits
normHits.plot <- ggplot(Boruta5k.results, aes(Variable, normHits)) +
geom_boxplot() + theme_classic() + theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
labs(title='MEDUSA SCNA loss - Boruta Normalised Hits')
plot(imp.count.plot)
plot(normHits.plot)
write.csv(collated,'MEDUSA A.csv')
write.csv(imps.stats,'MEDUSA B.csv')
write.csv(imp.counts,'MEDUSA C.csv')
